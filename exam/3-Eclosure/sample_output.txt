SAMPLE OUTPUT: Epsilon Closure Program Execution

PS C:\Users\allen\workspace\KTU-sem7-compilerdesign-programs-main\exam\3-Eclosure> .\a.exe

Enter number of states: 4
Enter states: q0 q1 q2 q3
Enter number of transitions: 6
Enter transitions (from input to):
q0 e q1
q0 a q2
q1 e q3
q1 b q2
q2 b q3
q3 a q0

Epsilon closure of q0 = { q0 q1 q3 }
Epsilon closure of q1 = { q1 q3 }
Epsilon closure of q2 = { q2 }
Epsilon closure of q3 = { q3 }

PS C:\Users\allen\workspace\KTU-sem7-compilerdesign-programs-main\exam\3-Eclosure>

===========================================================================

EXPLANATION OF THE SAMPLE OUTPUT:

NFA DEFINITION:
- States: {q0, q1, q2, q3}
- Alphabet: {a, b, ε} (where ε represents epsilon)
- Transitions:
  * q0 --ε--> q1 (epsilon transition)
  * q0 --a--> q2 (regular transition with 'a')
  * q1 --ε--> q3 (epsilon transition)
  * q1 --b--> q2 (regular transition with 'b')
  * q2 --b--> q3 (regular transition with 'b')
  * q3 --a--> q0 (regular transition with 'a')

EPSILON CLOSURE COMPUTATION:

1. ε-closure(q0):
   - Start with q0 itself: {q0}
   - q0 has epsilon transition to q1: add q1 → {q0, q1}
   - q1 has epsilon transition to q3: add q3 → {q0, q1, q3}
   - Final: {q0, q1, q3}

2. ε-closure(q1):
   - Start with q1 itself: {q1}
   - q1 has epsilon transition to q3: add q3 → {q1, q3}
   - Final: {q1, q3}

3. ε-closure(q2):
   - Start with q2 itself: {q2}
   - q2 has no epsilon transitions
   - Final: {q2}

4. ε-closure(q3):
   - Start with q3 itself: {q3}
   - q3 has no epsilon transitions
   - Final: {q3}

NFA STATE DIAGRAM:
      ε       ε
q0 -----> q1 -----> q3
|         |         ^
|a        |b        |b
v         v         |
q2 ----------------+
      <--a--
      q3->q0

PRACTICAL APPLICATION:
- Used in NFA to DFA conversion algorithms (subset construction)
- Essential for simulating NFA execution
- Helps determine which states are "simultaneously active" in NFA
- Foundation for regular expression matching algorithms

COMPILATION STEPS:
1. Save the code as prog.c
2. Compile: gcc prog.c -o a.exe
3. Run: .\a.exe
4. Input states and transitions as shown above